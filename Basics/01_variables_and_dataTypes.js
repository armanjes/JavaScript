/**
âœ… Variables and Data Types:
Variables are containers for storing data values.
JavaScript has "dynamic typing", meaning you "don't need to specify data types" when declaring variables.

we use var, let, const keyword to declare variables
ğŸš€ var -> function scope
ğŸš€ let, const -> block scope (es6)
*/

var name = "jon doe"
console.log(name);

var digit = 111
console.log(digit);


/*
âœ… Common data types include:

âœ… primitive data types
ğŸš€ Strings (e.g., 'Hello, world!', "JavaScript", `hello world`)
ğŸš€ Numbers (e.g., 10, 3.14, -55)
ğŸš€ Booleans (true or false)
ğŸš€ undefined (e.g., variable that hasn't defined or value assigned)
ğŸš€ null (e.g., absence of any object value)
ğŸš€ symbol 
ğŸš€ bigInt
ğŸš€ use typeof or typeof() to know data type
ğŸ”¥ stored directly in "stack" and accessed

âœ… non-primitive or reference data types
ğŸš€ Objects (e.g., { name: 'John', age: 30 }) //datatype object
ğŸš€ Arrays (e.g., [1, 2, 3], ['apple', 'banana', 'orange']) //datatype object
ğŸš€ functions
ğŸ”¥ stored in "heap" and accessed by reference 
*/


console.log(typeof name);
console.log(typeof (digit));

var yes = true
var yes1 = 'true'
var no = false
console.log(typeof (yes), typeof (yes1), typeof (no));

// stack
let person = 'john'
let newPerson = person
newPerson = 'jonathan'
console.log(person ,newPerson);

var digitArray = [1, 2, 3]
console.log(typeof digitArray);

var details = {
    name: "jack",
    age: 19
}

console.log(typeof details);

// heap
let personDetail = details
personDetail.name = "brad"
console.log(details ,personDetail);